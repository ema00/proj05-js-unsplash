// Tests for the Post Controller

### Domain URL
@domain = http://localhost:3000/


### Posts endpoint
@postsEndpoint = posts/
@postsUrl = {{domain}}{{postsEndpoint}}


### Authentication endpoints
@loginEndpoint = login/
@logoutEndpoint = logout/
@loginUrl = {{domain}}{{loginEndpoint}}
@logoutUrl = {{domain}}{{logoutEndpoint}}


### Login, necessary to access the Posts endpoint
### Request Token for an existing User, right password
### Return Status 200
# @name loginUser
@userName = "johnson"
@userPassword = "benny999"
POST {{loginUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "name": {{userName}},
    "password": {{userPassword}}
}


### Token for querying the Posts endpoint in subsequent requests
@uid = {{loginUser.response.headers.id}}
@token = {{loginUser.response.headers.token}}


### Logout an existing User, right session
### Return Status 200; logout if user is logged in
POST {{logoutUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}


### Create Post
### Return Status 201
# @name createPost
@title = "Post number 12"
@content = "Content of the 12th post..."
POST {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "title": {{title}},
    "content": {{content}}
}


### Search the Posts of a User by id
### Return Status 200
@otherUserId = 40
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "userId": {{otherUserId}}
}


### Search the Posts by title, text search
### Return Status 200
@titleLike = "#"
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "title": {{titleLike}}
}


### Search the Posts by content, text search
### Return Status 200
@contentLike = "first"
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "content": {{contentLike}}
}


### Search the Posts by title and content, text search
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "title": {{titleLike}},
    "content": {{contentLike}}
}


### Search the Posts by userId title and content
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "userId": {{uid}},
    "title": {{titleLike}},
    "content": {{contentLike}}
}


### Search the Posts by of another user by userId
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "userId": {{otherUserId}},
    "page": 1,
    "size": 2
}


### Search the Posts by userId title and content, userId does not exist
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "userId": -10,
    "title": {{titleLike}},
    "content": {{contentLike}}
}


### Search the Posts by title, title does not exist
### Return Status 200
@NotExisting = "zzzzzzzzzzzzzzzzzzzzzzzzzzzeep"
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "title": {{NotExisting}}
}


### Search the Posts by content, content does not exist
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "content": {{NotExisting}},
    "page": 0,
    "size": 10
}


### Search the Posts without conditions, returns ALL posts
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
}


### Search the all Posts paginated
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "page": 0,
    "size": 10
}


### Search the all Posts paginated, page out of range (above)
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "page": 1000000,
    "size": 50
}


### Search the all Posts paginated, page out of range (below)
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "page": -10,
    "size": 20
}


### Search the all Posts paginated, page not valid
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "page": "NOT A NUMBER",
    "size": 50
}


### Search the all Posts paginated, size not valid
### Return Status 200
GET {{postsUrl}} HTTP/1.1
Content-Type: application/json
Accept: application/json
id: {{uid}}
token: {{token}}

{
    "page": 0,
    "size": "NOT A NUMBER"
}


### Find a post by id, post exists
### Return Status 200
@id = 9
GET {{postsUrl}}{{id}} HTTP/1.1
Accept: application/json
id: {{uid}}
token: {{token}}



### Find a post by id, post does not exist
### Return Status 204
@idNonExistent = 10
GET {{postsUrl}}{{idNonExistent}} HTTP/1.1
Accept: application/json
id: {{uid}}
token: {{token}}

