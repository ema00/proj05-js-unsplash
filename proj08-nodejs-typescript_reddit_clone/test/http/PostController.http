// Tests for the Post Controller

### Posts endpoint
@domain = http://localhost:3000/
@endpoint = posts/
@url = {{domain}}{{endpoint}}


### Create Post
### Return Status 201
# @name createPost
@title = "Post #2"
@content = "Content of the second post ;), aight!"
@userId = 38
POST  {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "userId": {{userId}},
    "title": {{title}},
    "content": {{content}}
}


### Search the Posts of a User by id
### Return Status 200
@userIdSearch = 38
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "userId": {{userIdSearch}}
}


### Search the Posts by title, text search
### Return Status 200
@titleLike = "#"
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "title": {{titleLike}}
}


### Search the Posts by content, text search
### Return Status 200
@contentLike = "first"
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "content": {{contentLike}}
}


### Search the Posts by title and content, text search
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "title": {{titleLike}},
    "content": {{contentLike}}
}


### Search the Posts by userId title and content
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "userId": {{userIdSearch}},
    "title": {{titleLike}},
    "content": {{contentLike}}
}


### Search the Posts by userId title and content, userId does not exist
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "userId": -10,
    "title": {{titleLike}},
    "content": {{contentLike}}
}


### Search the Posts by title, title does not exist
### Return Status 200
@NotExisting = "zzzzzzzzzzzzzzzzzzzzzzzzzzzeep"
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "title": {{NotExisting}}
}


### Search the Posts by content, content does not exist
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "content": {{NotExisting}},
    "page": 0,
    "size": 10
}


### Search the Posts without conditions, returns ALL posts
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
}


### Search the all Posts paginated
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "page": 0,
    "size": 10
}


### Search the all Posts paginated, page out of range (above)
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "page": 1000000,
    "size": 50
}


### Search the all Posts paginated, page out of range (below)
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "page": -10,
    "size": 20
}


### Search the all Posts paginated, page not valid
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "page": "NOT A NUMBER",
    "size": 50
}


### Search the all Posts paginated, size not valid
### Return Status 200
GET {{url}} HTTP/1.1
Content-Type: application/json
Accept: application/json

{
    "page": 0,
    "size": "NOT A NUMBER"
}


### Find a post by id, post exists
### Return Status 200
@id = 9
GET {{url}}{{id}} HTTP/1.1
Accept: application/json


### Find a post by id, post does not exist
### Return Status 200
@idNonExistent = 10
GET {{url}}{{idNonExistent}} HTTP/1.1
Accept: application/json

